from datetime import datetime
import json
import httpx
import util
import config
from util.log import logger


# cookie 中的 __Secure-3PSID
token = config.env.get('youtube_token', '')
# 可选, 获取 r-18 视频时需要, headers 中的 Authorization, 以 SAPISIDHASH 开头
auth = config.env.get('youtube_auth', '')
# 可选, 获取 r-18 视频时需要, cookie 中的 __Secure-3PSIDTS 和 __Secure-3PAPISID
_3PSIDTS = config.env.get('youtube_3PSIDTS', '')
_3PAPISID = config.env.get('youtube_3PAPISID', '')

cookie = f'__Secure-3PSID={token}'
if _3PSIDTS:
  cookie += f'; __Secure-3PSIDTS={_3PSIDTS}'
if _3PAPISID:
  cookie += f'; __Secure-3PAPISID={_3PAPISID}'
gheaders = {
  'content-type': 'application/json',
  'referer': 'https://www.youtube.com/',
  'origin': 'https://www.youtube.com',
  'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36',
  'cookie': cookie,
}
if auth:
  gheaders['authorization'] = auth
now = int(datetime.now().timestamp()) + 3600 * 24 * 365
cookies = f"""# Netscape HTTP Cookie File
# This file is generated by yt-dlp.  Do not edit.

.youtube.com\tTRUE\t/\tTRUE\t{now}\t__Secure-3PSID\t{token}"""
if _3PSIDTS:
  cookies += f'\n.youtube.com\tTRUE\t/\tTRUE\t{now}\t__Secure-3PSIDTS\t{_3PSIDTS}'
if _3PAPISID:
  cookies += (
    f'\n.youtube.com\tTRUE\t/\tTRUE\t{now}\t__Secure-3PAPISID\t{_3PAPISID}'
  )

cookies_path = util.getDataFile('youtube_cookies.txt')
with open(cookies_path, 'w') as f:
  f.write(cookies)


async def get_info(video_id):
  url = httpx.URL('https://www.youtube.com/youtubei/v1/player')
  headers = httpx.Headers(gheaders)
  # headers['upstream-host'] = 'www.youtube.com'
  # url = url.copy_with(host='fuck-cors.hbcaoqaq-1cd.workers.dev')
  data = json.dumps(
    {
      'playbackContext': {
        'contentPlaybackContext': {'html5Preference': 'HTML5_PREF_WANTS'}
      },
      'contentCheckOk': True,
      'racyCheckOk': True,
      'context': {
        'client': {
          'clientName': 'WEB',
          'clientVersion': '2.20250620.01.00',
          'hl': 'zh-CN',
        },
        'thirdParty': {'embedUrl': 'https://google.com'},
      },
      'videoId': video_id,
    }
  )
  r = await util.post(
    url,
    params={
      'prettyPrint': 'false',
    },
    data=data,
    headers=headers,
  )
  if r.status_code != 200:
    return '请求失败'
  res = r.json()
  if 'playabilityStatus' in res:
    if res['playabilityStatus']['status'] in ('ERROR', 'LOGIN_REQUIRED'):
      logger.info(res['playabilityStatus'])
      reason = res['playabilityStatus']['reason']
      if reason == 'This video is unavailable':
        reason = '视频不可用'
      return reason
  if 'videoDetails' not in res:
    logger.info(res['playabilityStatus'])
    return '解析失败'
  return res['videoDetails']


def parse_info(res):
  vid = res['videoId']
  title = res['title']
  author = res['author']
  uid = res['channelId']
  msg = (
    f'<a href="https://youtube.com/watch?v={vid}">{title}</a> - <a href="https://youtube.com/channel/{uid}">{author}</a> #YouTuBe'
    f'\nvia @%s' % bot.me.username
  )
  return msg
